{"version":3,"sources":["components/Form.js","components/ContactList.js","App.js","serviceWorker.js","index.js"],"names":["Form","react_default","a","createElement","onSubmit","this","props","addNewPerson","value","newName","onChange","handleNewName","newNumber","handleNewNumber","type","Component","ContactList","_this","persons","map","person","key","id","name","number","onClick","event","deleteContact","baseUrl","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","preventDefault","state","includes","personObject","axios","post","then","response","setState","concat","data","index","findIndex","personToDelete","window","confirm","delete","splice","target","_this2","get","console","log","components_Form","components_ContactList","React","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.eeab2578.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass Form extends Component {\n\n    render() {\n        return (\n            <div>\n                <h2>Puhelinluettelo</h2>\n                <form onSubmit={this.props.addNewPerson}>\n                    <div>\n                        nimi: <input\n                        value={this.props.newName}\n                        onChange={this.props.handleNewName}\n                    />\n                    </div>\n                    <div>\n                        numero: <input\n                        value={this.props.newNumber}\n                        onChange={this.props.handleNewNumber}\n                    />\n                    </div>\n                    <div>\n                        <button type=\"submit\">lisää</button>\n                    </div>\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default Form;","import React, {Component} from 'react';\n\nclass ContactList extends Component {\n\n    render() {\n        return (\n            <div>\n                <h2>Numerot</h2>\n                <table>\n                    <tbody>\n                    {this.props.persons.map(person =>\n                        <tr key={person.id}>\n                            <td>{person.name}</td>\n                            <td>{person.number}</td>\n                            <td>\n                                <button onClick={(event) => this.props.deleteContact(event, person.id)}>\n                                    Poista\n                                </button>\n                            </td>\n                        </tr>)}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n}\n\nexport default ContactList;","import React from 'react';\nimport Form from './components/Form'\nimport ContactList from \"./components/ContactList\"\nimport axios from 'axios'\n\nconst baseUrl = '/api/persons'\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            persons: [],\n            newName: '',\n            newNumber: ''\n        }\n    }\n\n    componentDidMount() {\n        axios\n            .get(baseUrl)\n            .then(response => {\n                console.log(response)\n                const persons = response.data\n                this.setState({persons: persons})\n            })\n    }\n\n    addNewPerson = (event) => {\n        event.preventDefault()\n        const personNames = this.state.persons.map(person => person.name)\n        if (personNames.includes(this.state.newName) === false) {\n            const personObject = {\n                name: this.state.newName,\n                number: this.state.newNumber\n            }\n            axios\n                .post(baseUrl, personObject)\n                .then(response => {\n                    this.setState({\n                        persons: this.state.persons.concat(response.data),\n                        newName: '',\n                        newNumber: ''\n                    })\n                })\n        }\n\n    }\n\n    deleteContact = (event, id) => {\n        event.preventDefault()\n        const index = this.state.persons.findIndex(person => person.id === id);\n        const personToDelete = this.state.persons[index];\n        if (window.confirm(\"Poistetaanko \" + personToDelete.name)) {\n            axios\n                .delete(baseUrl + id)\n                .then(() => {\n                    this.state.persons.splice(index, 1)\n                    this.setState({\n                        persons: this.state.persons\n                    })\n                })\n        }\n    }\n\n    handleNewName = (event) => {\n        this.setState({newName: event.target.value})\n    }\n\n    handleNewNumber = (event) => {\n        this.setState({newNumber: event.target.value})\n    }\n\n    render() {\n        return (\n            <div>\n                <Form\n                    newName={this.state.newName}\n                    newNumber={this.state.newNumber}\n                    addNewPerson={this.addNewPerson}\n                    handleNewName={this.handleNewName}\n                    handleNewNumber={this.handleNewNumber}\n                />\n                <ContactList\n                    persons={this.state.persons}\n                    deleteContact={this.deleteContact}\n                />\n            </div>\n        )\n    }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}